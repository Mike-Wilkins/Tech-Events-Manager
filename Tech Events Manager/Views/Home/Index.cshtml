
@model Tech_Events_Manager.ViewModel.CustomerViewModel

    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<style>

    #map {
        display: block;
        margin-left: auto;
        margin-right: auto;
        margin-top: 20px;
        margin-bottom: 10px;
        height: 440px;
        width: 100%;
        padding: 40px;
    }

    .field-validation {
        font-size: 0.9em;
        color: white;
        font-style: italic;
    }
</style>


@using (Ajax.BeginForm("Index", new AjaxOptions
{
    HttpMethod = "POST",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "map"
}))


{
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-dark " style="background-color:#27273b; margin-top:10px; width:75%; margin-left:auto; margin-right:auto">
        <a class="navbar-brand px-4">Enter your postcode:</a>

        <div class="form-inline">

            @Html.TextBoxFor(m => m.UserPostcode, new { @class = "form-control", @placeholder = "Postcode" })
            @Html.ValidationMessageFor(m => m.UserPostcode, "", new { @class = "field-validation" })

        </div>

        <a class="navbar-brand px-4"> and distance:</a>
        <div class="form-inline">

            @Html.DropDownListFor(m => m.Distance, new List<SelectListItem>
               {
                   new SelectListItem() {Text = "5 miles", Value="5"},
                   new SelectListItem() {Text = "10 miles", Value="10"},
                   new SelectListItem() {Text = "20 miles", Value="20"},
                   new SelectListItem() {Text = "30 miles", Value="30"},
                   new SelectListItem() {Text = "40 miles", Value="40"}
               }, new { @class = "form-control" })

        </div>
        <div class="form-actions no-color px-4">
            <input type="submit" value="Search" class="btn btn-secondary" />
        </div>

    </nav>
}

<div id="map"></div>


<!-- Create Google Map ------------------------------------------------------------------------>

    <div class="row">
        <script>

            function resetMapOrigin(){
              map.setZoom(9);
              map.setCenter({lat:52.7670247,lng:-1.2435722});

            };
             function resetUserOrigin(){
              map.setZoom(9);
              map.setCenter({lat: @Model.UserLat, lng: @Model.UserLng});
            };

            var map;
            function initMap() {
                var location = { lat: 52.7670247, lng: -1.2435722 };
                var userLocation = { lat: @Model.UserLat, lng: @Model.UserLng};


                if (@Model.UserLat == 0) {
                    map = new google.maps.Map(document.getElementById('map'), { zoom: 9, center: location });
                } else {
                    map = new google.maps.Map(document.getElementById('map'), { zoom: 9, center: userLocation });
                };

                var infowindow = new google.maps.InfoWindow();


                @foreach (var item in Model.Event)
                {
                   

                        double userLat = Model.UserLat;
                        double userLng = Model.UserLng;
                        double eventLat = Convert.ToDouble(item.Latitude);
                        double eventLng = Convert.ToDouble(item.Longitude);

                        double rlat1 = Math.PI * userLat / 180;
                        double rlat2 = Math.PI * eventLat / 180;
                        double theta = userLng - eventLng;
                        double rtheta = Math.PI * theta / 180;
                        double dist =
                            Math.Sin(rlat1) * Math.Sin(rlat2) + Math.Cos(rlat1) *
                            Math.Cos(rlat2) * Math.Cos(rtheta);

                        dist = Math.Acos(dist);
                        dist = dist * 180 / Math.PI;
                        dist = dist * 60 * 1.1515;


                        double result = dist.CompareTo(Model.Distance);


                        if ((Model.UserLat == 0 || result == -1) && item.Date > DateTime.Now)
                        {

                              <text>
                                    var event_image = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png';
                                    var marker = new google.maps.Marker({
                                        position: { lat: @item.Latitude, lng: @item.Longitude},

                                        map: map,
                                        icon: event_image
                                        });
                                         marker.addListener('click', function () 
                                         {
                                        infowindow.setContent(
                                            "<div id = 'infowindow' > <h5>@item.Organiser</h5> <h6><a href='@item.Website'>Event Website</a></h6></div > ");
                                        infowindow.open(map, this);
                                        map.setCenter(this.getPosition());
                                        map.setZoom(12);
                                             google.maps.event.addListener(infowindow, 'closeclick', function ()
                                             {
                                                if (@Model.UserLat == 0) {
                                                    resetMapOrigin();
                                                } else {
                                                    resetUserOrigin();
                                                };

                                             });

                                         });

                              </text>
                        }
                            


                        };

                        var image = 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png';
                        var usermarker = new google.maps.Marker({
                        position: { lat: @Model.UserLat, lng: @Model.UserLng},
                        map: map,
                        animation: google.maps.Animation.BOUNCE,
                        icon: image,

                });
            }

        </script>

        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBj8k95-RJyz0HNan_RcgS_-suLQVb7NzA&callback=initMap"
                async defer>
        </script>
    </div>


<!-- List event cards ---------------------------------------------------------------------------------------------->


<div class="row d-flex justify-content-center">
    @foreach (var item in Model.Event)
    {
        if (item.Date > DateTime.Now)
        {
        <div class="card-body col-md-2 mx-auto text-center m-md-2">

            <a href="@Url.Content(item.Website)" style="text-decoration:none; color:black">
                <img src="@Url.Content(item.ImagePath)" style="width: 95%; height: 40%" /> 
               

                <h4 class="card-title">@Html.DisplayFor(modelItem => item.Organiser)</h4>
                <p class="card-text">@Html.DisplayFor(modelItem => item.City)</p>
                <p class="card-text">@Html.TextBoxFor(modelItem => item.Date, "{0:d MMMMMMMMM yyyy}", new { @class = "date-style", @readonly = true })</p>

            </a>
        </div>
        }
    }

</div>
